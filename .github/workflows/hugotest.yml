# This is a basic workflow to help you get started with Actions

name: Generate Output Markdown

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ nielshugopoc ]

jobs:
  HugoBuild:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - uses: srt32/hugo-action@master
        name: Create a new Hugo Environment
        with: 
          args: new site waf --force

      - name: Move files into the Hugo directories
        shell: pwsh
        run: |
          # Make a nice sudo function in powershell :)
          function Invoke-MySudo { & /usr/bin/env sudo pwsh -command "& $args" }
          set-alias sudo invoke-mysudo 

          # Give Hugo some data files:
          Get-ChildItem -R data | where { $_.Name -match ".json$" } | % { sudo Copy-Item -Path $_.FullName -Destination "waf/data/$($_.Name)"  }
          
          # Each directory in the template directory will be a content type in Hugo.
          Get-ChildItem -Directory template | % {
            $project = $_.Name
            # Create project directories under content and layouts:
            sudo New-Item -ItemType Directory -Path "waf/content/$project"
            sudo New-Item -ItemType Directory -Path "waf/layouts/$project"

            # The content directories each need an empty .md file in them
            sudo New-Item -ItemType File -Path "waf/content/$project/$project.md"

            # The template files have to be in the project directories under layouts, with html extensions:
            Get-ChildItem -Path template/$project | % {
              $filename = $_.Name -replace "\.md$",""
              sudo Copy-Item -Path $_.FullName -Destination "waf/layouts/$project/$filename.html"
            }            
          }

      - uses: srt32/hugo-action@master
        name: Build Hugo content
        with: 
          args: -s waf

      - name: Copy files out of Hugo
        shell: pwsh
        run: |
          # Process the output for each of the 'projects' that went in
            Get-ChildItem -Directory template | % {
              New-Item -ItemType Directory -Path "output/$($_.Name)" -Force
              Copy-Item -Path "waf/public/$($_.Name)/index.html" -Destination "output/$($_.Name)/$($_.Name).md"
            }

#      - name: (Debug) Show all files
#        shell: pwsh
#        run: |
#          gci -Recurse

      - name: Push files to repo
        shell: pwsh
        run: |
          git config --global user.name 'Github Action'
          git config --global user.email 'wellarchitected@users.noreply.github.com'
     
          git add 'output/'
          git status --short

          $message = git log -1 --pretty=format:"%s"

          if(git status -uno --short) {
            git commit -am "Auto update: $message"
            git push origin
          } 
          else {
            Write-Output "No changes to commit. Bye."
          }