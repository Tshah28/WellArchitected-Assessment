name: Generate Output Markdown

on:
  push:
    branches:
      - main
      - workflowdev
      - martin-hugodev

jobs:
  HugoBuild:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set working directories
        run: |
          # Define the names of content directories, for use in the rest of the workflow
          echo '::set-env name=DATADIR::data'
          echo '::set-env name=TEMPLATEDIR::template'
          echo '::set-env name=OUTPUTDIR::Assessments'
          echo '::set-env name=GENERATOR_ROOT::generator'

      - name: Merge data files
        shell: pwsh
        run: |
          # All content of the 'data' directory is parsed and merged into a single json file
          # that contains all the input. We're saving this one-up from the checked-out structure
          # to avoid name collisions with files in the repo.

          New-Item -ItemType Directory -Path $env:GENERATOR_ROOT/data

          $AllItems = @()
          Get-ChildItem -Path $env:DATADIR | where { $_.Name -match ".data.json$" } | % {
              Get-Content -Path $_.FullName | ConvertFrom-Json | %{
                  if($_) 
                  {
                      $AllItems += $_
                  }
              }
          }

          $AllItems | ConvertTo-Json -Depth 10| Out-File "$env:GENERATOR_ROOT/data/input.json"

          # Copy the rest of data files which don't contain questions, e.g. categories
          Get-ChildItem -Path $env:DATADIR | where { $_.Name -notmatch ".data.json$" } | % {
              Copy-Item -Path $_.FullName -Destination $env:GENERATOR_ROOT/data
          }
      
      - name: Move files into the Hugo directories
        shell: pwsh
        run: |
          # What's the name of the template directory?
          $templatedir = $env:TEMPLATEDIR

          # give build agent the required permissions 
          sudo chmod a+rw $env:GENERATOR_ROOT/ -R

          Get-ChildItem -Recurse -File $templatedir | % {
            # Get output names in the form of "pillar-lens" (e.g. "opex-servicelens").
            $project =  (Split-Path $_ -Parent | Split-Path -Leaf) + "-" + (Split-Path $_ -LeafBase)  
          
            Write-Output "Adding project $project to Hugo."

            # Each project template will be in a separate directory.
            New-Item -ItemType Directory -Path "$env:GENERATOR_ROOT/templates/$project"
            Copy-Item -Path $_.FullName -Destination "$env:GENERATOR_ROOT/templates/$project/$project.md"
          }

      - uses: srt32/hugo-action@master
        name: Build Hugo content
        with: 
          args: -s generator

      - name: Copy files out of Hugo
        shell: pwsh
        run: |
          # Which directories are we dealing with?
          $outputdir = $env:OUTPUTDIR

          # Clear the content of the output dir.
          # This is to ensure that there is no output of deleted templates.
          if(Test-Path $outputdir)
          {
            Remove-Item -Path "$outputdir/*" -Recurse -Force
          }

          # Restructure output to the right directories.
          # e.g. "Assesments/opex/applicationlens.md"
          Get-ChildItem "$env:GENERATOR_ROOT/output" | % {
              # Extracting folder structure from naming convention.
              $destPath = "$outputdir/" + ((Split-Path $_ -Leaf) -replace "-","/")
              
              # To create the directory structure, we need parent name.
              $destDir = Split-Path $destPath -Parent
              New-Item -ItemType Directory $destDir -Force
              
              Write-Host "Copy $destPath..."
              Copy-Item $_.FullName -Destination $destPath -Recurse -Force
          }

      - name: Push files to repo
        shell: pwsh
        run: |
          # Get outputdir from variables
          $outputdir = $env:OUTPUTDIR
          
          # Set the name on the commits as it will appear in Github
          git config --global user.name 'Github Action'
          git config --global user.email 'wellarchitected@users.noreply.github.com'
     
          # Everything coming from Hugo is in the output dir by now
          git add $outputdir
          git status --short

          # Get the name of the commit that triggered the workflow, 
          # so we can refer to it in our automated commit message.
          $message = git log -1 --pretty=format:"%s"

          # Only commit if there are changes to commit, otherwise commit will throw an error.
          if(git status -uno --short) {
            git commit -am "Auto update: $message"
            git push origin
          } 
          else {
            Write-Output "No changes to commit. Bye."
          }

      # - name: (Debug) Show all files
      #   if: ${{ always() }}
      #   shell: pwsh
      #   run: |
      #     gci -Recurse
