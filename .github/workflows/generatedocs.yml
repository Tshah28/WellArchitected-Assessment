name: Generate Assessment Content

on:
  push:
    paths:
      - ".github/workflows/generatedocs.yml"
      - "data/**"
      - "templates/**"

jobs:
  HugoBuild:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set working directories
        run: |
          # Define the names of content directories, for use in the rest of the workflow         
          echo 'DATADIR=data' >> $GITHUB_ENV
          echo 'TEMPLATEDIR=templates' >> $GITHUB_ENV
          echo 'OUTPUTDIR=assessments' >> $GITHUB_ENV
          echo 'GENERATOR_ROOT=generator' >> $GITHUB_ENV

      - name: Create directories
        shell: pwsh
        run: |
          mkdir $env:GENERATOR_ROOT
          cp $env:TEMPLATEDIR/config.toml $env:GENERATOR_ROOT

      - name: Validate JSON
        shell: pwsh
        run: |
          Get-ChildItem -Path $env:DATADIR | % {
            $file = $_.FullName
              $content = Get-Content -Path $file
              try {
                $json = $content | ConvertFrom-Json
              }
              catch {
                Write-Error "Invalid JSON in file $file"
              }
            }

      - name: Update object GUIDs in source data JSON files
        shell: pwsh
        run: |
            Get-ChildItem -Path $env:DATADIR -Filter *.data.json | % {
              $file = $_.FullName

              $content = Get-Content -Path $file | ConvertFrom-Json

              # Check and update IDs for toplevel items
              $content | % {

                if(-not [guid]::TryParse($_.id, $([ref][guid]::Empty)))
                {
                  Write-Host "Missing GUID found for ", $_.title
                  $_.id=[guid]::NewGuid()
                }

                # Check and update IDs for child-level items
                if ($_.children.count -ge 1) {
                  $_.children | % {
                    try {
                      if(-not [guid]::TryParse($_.id, $([ref][guid]::Empty)))
                      {
                        Write-Host "Missing Child GUID found for ", $_.title
                        $_.id=[guid]::NewGuid()
                      } 
                    } catch {
                        Write-Host "Failed to add child ID"
                    }
                  }
                }
              }

              # Write updates Data files
              $content | ConvertTo-Json -depth 16 | set-content $file
            }

      - name: Merge data files
        shell: pwsh
        run: |
          # All content of the 'data' directory is parsed and merged into a single json file
          # that contains all the input. We're saving this one-up from the checked-out structure
          # to avoid name collisions with files in the repo.

          New-Item -ItemType Directory -Path $env:GENERATOR_ROOT/data

          $AllItems = @()
          Get-ChildItem -Path $env:DATADIR | where { $_.Name -match ".data.json$" } | % {
              Get-Content -Path $_.FullName | ConvertFrom-Json | %{
                  if($_) 
                  {
                      $AllItems += $_
                  }
              }
          }

          $AllItems | ConvertTo-Json -Depth 10| Out-File "$env:GENERATOR_ROOT/data/input.json"

          # Copy the rest of data files which don't contain questions, e.g. categories
          Get-ChildItem -Path $env:DATADIR | where { $_.Name -notmatch ".data.json$" } | % {
              Copy-Item -Path $_.FullName -Destination $env:GENERATOR_ROOT/data
          }

      - name: Check categories, types and IDs
        shell: pwsh
        run: |
          # This will check whether 
          # - only (sub)categories from the categories.json are used 
          # - only types from types.json are used
          # - all used IDs are unique

          $foundIssues = $false
          $validCategories = Get-Content -Path $env:GENERATOR_ROOT/data/categories.json | ConvertFrom-Json
          $validTypes = Get-Content -Path $env:GENERATOR_ROOT/data/types.json | ConvertFrom-Json

          $AllItems = Get-Content -Path $env:GENERATOR_ROOT/data/input.json | ConvertFrom-Json

          # Get all used categories from the input.json and filter to unique
          $allCategories = $allitems | Select-Object -Property category,subcategory,type,title | Sort-Object -Property category,subcategory,type | Get-Unique -AsString

          foreach($item in $allCategories) 
          {
              if($item.category -NotIn $validCategories.title)
              {
                  Write-Warning "Category '$($item.category)' does not exist in categories.json. Item: '$($item.title)'"
                  $foundIssues = $true
              }
              else
              {
                  $category = $validCategories | Where-Object title -match $item.category
                  if($item.subCategory -NotIn $category.subCategories.title)
                  {
                      Write-Warning "Sub Category '$($item.subCategory)' for category '$($category.title)' does not exist in categories.json. Item: '$($item.title)'"
                      $foundIssues = $true
                  }
              }

              if($item.type -NotIn $validTypes.title)
              {
                  Write-Warning "Type '$($item.type)' does not exist in types.json. Item: '$($item.title)'"
                  $foundIssues = $true
              }
          }

          $invalidIds = $AllItems |  Where-Object { -not [guid]::TryParse($_.id, $([ref][guid]::Empty)) }
          foreach($item in $invalidIds)
          {
              Write-Warning "ID $($item.id) is not a valid GUID!"
              $foundIssues = $true
          }

          # Check for duplicate IDs. For now we filter out all items which have no ID yet. Those should become mandatory at some point.
          $duplicateIds = $AllItems |  Where-Object { $_.id -ne $null -and $_.id -ne "" } | Group-Object -Property id | Where-Object { $_.Count -gt 1 }
          foreach($id in $duplicateIds)
          {
              Write-Warning "ID $($id.Name) was used multiple times! Please make sure to use unique IDs"
              $foundIssues = $true
          }

          if($foundIssues) 
          {
              Write-Error "Please fix duplicate IDs and/or mismatch in categories or types."
          }
          else
          {
              Write-Host "All good! All used categories exist in the categories.json and all used types are in types.json."
          }

      - name: Move files into the Hugo directories
        shell: pwsh
        run: |
          # What's the name of the template directory?
          $templatedir = $env:TEMPLATEDIR

          # give build agent the required permissions 
          sudo chmod a+rw $env:GENERATOR_ROOT/ -R

          Get-ChildItem -Recurse -File $templatedir -Filter *.md | % {
            # Get output names in the form of "pillar-lens" (e.g. "opex-servicelens").
            # Currently this approach is limited to one level of nesting and will not work for deeper sub-directories.
            $project =  (Split-Path $_ -Parent | Split-Path -Leaf) + "-" + (Split-Path $_ -LeafBase)  

            Write-Output "Adding project $project to Hugo."

            # Each project template will be in a separate directory.
            New-Item -ItemType Directory -Path "$env:GENERATOR_ROOT/templates/$project"
            Copy-Item -Path $_.FullName -Destination "$env:GENERATOR_ROOT/templates/$project/$project.md"
          }

          # Prepare target folder for partials following Hugo's convention.
          New-Item -ItemType Directory -Path "$env:GENERATOR_ROOT/templates/partials"
          # Read all partials and copy them to the right folder.
          # Extension MUST be .html.
          Get-ChildItem -Recurse -File $templateDir -Filter "*.partial" | % {
              Copy-Item -Path $_.FullName -Destination "$env:GENERATOR_ROOT/templates/partials/$($_.Name)"
          }

      - uses: srt32/hugo-action@master
        name: Build Hugo content
        with:
          # TODO: make path dynamic
          args: -s generator

      - name: Copy files out of Hugo
        shell: pwsh
        run: |
          # Which directories are we dealing with?
          $templatedir = $env:TEMPLATEDIR
          $outputdir = $env:OUTPUTDIR

          # Clear the content of the output dir.
          # This is to ensure that there is no output of deleted templates.
          if(Test-Path $outputdir)
          {
            Remove-Item -Path "$outputdir/*" -Recurse -Force
          }

          # Restructure output to the right directories.
          # e.g. "assessments/opex/applicationlens.md"
           Get-ChildItem $templatedir -Recurse -File -Filter *.md | % {
              $pillar = (Split-Path $_ -Parent | Split-Path -Leaf)
              $lens = (Split-Path $_ -LeafBase)
              # Create necessary directory structure, don't worry about folder existing.
              New-Item -ItemType Directory "$outputdir/$pillar" -Force
              
              Write-Host "Copy to $outputdir/$pillar/$lens.md"
              Copy-Item $env:GENERATOR_ROOT/output/$pillar-$lens.md -Destination $outputdir/$pillar/$lens.md
          }

      - name: Push files to repo
        shell: pwsh
        run: |
          # Get outputdir from variables
          $outputdir = $env:OUTPUTDIR
          $datadir   = $env:DATADIR

          # Set the name on the commits as it will appear in Github
          git config --global user.name 'Github Action'
          git config --global user.email 'wellarchitected@users.noreply.github.com'

          # Everything coming from Hugo is in the output dir by now
          git add $outputdir
          git add $datadir
          git status --short

          # Get the name of the commit that triggered the workflow, 
          # so we can refer to it in our automated commit message.
          $message = git log -1 --pretty=format:"%s"

          # Only commit if there are changes to commit, otherwise commit will throw an error.
          if(git status -uno --short) {
            git commit -m "Auto update: $message"
            git push origin
          } 
          else {
            Write-Output "No changes to commit. Bye."
          }

      - name: (Debug) Show all files
        if: ${{ always() }}
        shell: pwsh
        run: |
          gci -Recurse
